{"meta":{"title":"Carrot Blog","subtitle":"后端、大数据、Java、Go","description":"","author":"Wandering Carrot","url":"https://carrotwang.github.io","root":"/"},"pages":[{"title":"archives","date":"2019-11-05T09:04:56.000Z","updated":"2019-11-05T09:04:56.443Z","comments":true,"path":"archives/index-1.html","permalink":"https://carrotwang.github.io/archives/index-1.html","excerpt":"","text":""},{"title":"archives","date":"2019-11-05T08:30:34.000Z","updated":"2019-11-05T09:19:04.923Z","comments":true,"path":"archives/index.html","permalink":"https://carrotwang.github.io/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-11-05T08:40:36.000Z","updated":"2019-11-05T08:40:36.897Z","comments":true,"path":"categories/index-1.html","permalink":"https://carrotwang.github.io/categories/index-1.html","excerpt":"","text":""},{"title":"categories","date":"2019-11-05T08:31:45.000Z","updated":"2019-11-05T08:41:25.120Z","comments":true,"path":"categories/index.html","permalink":"https://carrotwang.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-11-05T08:30:39.000Z","updated":"2019-11-05T08:30:39.189Z","comments":true,"path":"tags/index.html","permalink":"https://carrotwang.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring IOC源码初探（一）","slug":"Spring-IOC源码初探（一）","date":"2019-11-06T03:36:37.000Z","updated":"2019-11-06T03:37:09.415Z","comments":true,"path":"2019/11/06/Spring-IOC源码初探（一）/","link":"","permalink":"https://carrotwang.github.io/2019/11/06/Spring-IOC%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"Spring提供了两个基本功能：IOC和AOP，基于此形成了Spring的生态环境，其中IOC又是整个Spring生态的基础，也就是IOC是Spring最核心的功能。 Spring IOC即反向控制，也可以叫依赖注入，把bean（组件）的初始化工作交给IOC容器，而不是在程序中完成，这就将组件的初始化和组件真正的核心功能相隔离，做到了解耦；另外，Spring IOC提倡面向接口编程，同样是为了解耦。Spring帮助我们使软件的结构符合，开闭原则（对修改封闭，对扩展开发：不需要修改代码来增加新的功能），是解耦组件依赖关系的利器。 下面我们通过对Spring IOC机制源码的学习，更好的理解Spring的IOC功能。 将从组成和行为两个角度来粗略分析Spring IOC容器，本文注意基于Spring IOC容器的组成来分析。 Spring容器主要指BeanFactory或者ApplicationContext，而我们常用的是后者。 由此图，我们可以看到Spring容器继承关系的一个结构图。核心接口就是BeanFactory，它提供了容器的基本方法getBean以获得容器内的组件，HierarchicalBeanFactory，ListableBeanFactory，AutowireCapableBeanFactory三个接口分别继承自BeanFactory，并对BeanFactory的功能做了扩展。HierarchicalBeanFactory提供了父子容器的功能，ListableBeanFactory提供了容器内Bean的列表操作功能，AutowireCapableBeanFactory则提供了Bean的自动装配功能；ConfigurableBeanFactory则提供了BeanFactory的一些配置功能；这就是BeanFactory接口层次关系图，XmlBeanFactory是一个常见的BeanFactory实现它就实现了上述接口以提供完整的容器功能，同样依照此接口层次实现也可以达到解耦、职责清晰的目的。 ApplicationContext同样拥有BeanFactory的上述能力，所以它继承了BeanFactory体系的大部分接口，上图中有一点是不准确的，ApplicationContext并未继承AutowireCapableBeanFactory，它的实现类是通过持有BeanFactory实例来拥有自动装配的功能（它不对外暴露自动装配功能），特别地，ApplicationContext实现了MessageSource、ResourceLoader、ApplicationEventPublisher三个接口，以拥有对国际化、加载资源、事件机制的支持。 常见的BeanFactory实现有XmlBeanFactory，DefaultListableBeanFactory，前者继承自后者，而后者也是Spring中BeanFactory默认的全功能实现，ApplicationContext也是通过持有它而实现。DefaultListableBeanFactory的使用需要我们去加载特定的配置资源，并配置解析器去解析，XmlBeanFactory只要求我们去加载需要的Xml配置资源。 我们在项目中更推荐使用ApplicationContext，它的实现类常见的有WebApplicationContext等，它除了帮助我们实现了资源加载功能外，还提供了上述的高级功能。","categories":[{"name":"Java Web","slug":"Java-Web","permalink":"https://carrotwang.github.io/categories/Java-Web/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://carrotwang.github.io/tags/Java/"},{"name":"Web","slug":"Web","permalink":"https://carrotwang.github.io/tags/Web/"},{"name":"Spring","slug":"Spring","permalink":"https://carrotwang.github.io/tags/Spring/"}]},{"title":"Netty源码阅读（关于ChannelPipeline和ChannelHandler）","slug":"Netty源码阅读（关于ChannelPipeline和ChannelHandler）","date":"2019-11-06T03:30:53.000Z","updated":"2019-11-06T03:31:32.980Z","comments":true,"path":"2019/11/06/Netty源码阅读（关于ChannelPipeline和ChannelHandler）/","link":"","permalink":"https://carrotwang.github.io/2019/11/06/Netty%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%B3%E4%BA%8EChannelPipeline%E5%92%8CChannelHandler%EF%BC%89/","excerpt":"","text":"1.ChannelPipeline其实，关于ChannelPipeline的东西主要就是一个责任链模式，另外就是是Channel、ChannelPipeline、Handler和ChannelContext的关系，在整体介绍一文中，已经讲的比较清楚了，在此不再赘述。 2.ChannelHandler 关于Handler的部分应该是比较好理解的，这也正是我们在开发中接触最多的部分（这体现了Netty给我们提供了一个易用的编程模型）。 Netty内置了许多有用的ChannelHandler，比如解决粘包问题的Handler，各种编解码Handler，日志Handler，心跳Handler等，极大的方便了我们的开发。 （1）Handler解决粘包问题 （2）Handler解决心跳","categories":[{"name":"Java Web","slug":"Java-Web","permalink":"https://carrotwang.github.io/categories/Java-Web/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://carrotwang.github.io/tags/Java/"},{"name":"Netty","slug":"Netty","permalink":"https://carrotwang.github.io/tags/Netty/"}]},{"title":"Netty源码阅读（关于ByteBuf）","slug":"Netty源码阅读（关于ByteBuf）","date":"2019-11-06T03:27:37.000Z","updated":"2019-11-06T03:28:41.407Z","comments":true,"path":"2019/11/06/Netty源码阅读（关于ByteBuf）/","link":"","permalink":"https://carrotwang.github.io/2019/11/06/Netty%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E5%85%B3%E4%BA%8EByteBuf%EF%BC%89/","excerpt":"","text":"ByteBuf接口提供了一套简单易用的API，并实现了对NIO ByteBuffer的兼容，其实现有“非池化的堆内存Buffer”，“非池化的直接内存Buffer”，“池化的堆内存Buffer”，“池化的直接内存Buffer”，另外ByteBuf的实现提供了对内存泄漏不同级别的监控。 ByteBuf的内存池实现，ByteBuf对内存泄漏的监控，是我比较感兴趣的两个地方。 1.ByteBuf的内存池实现 这里是最繁杂、最难的部分，这里后面补上。2.ByteBuf对内存泄露的监控 Netty的内存监控是针对内存池和直接内存而言的，对于HeapByteBuf自有虚拟机完成GC。 对于内存池而言，内存泄漏产生在Buffer已经使用完，但是这块内存还没有归还给内存池，对于直接内存的内存泄漏，是Buffer使用完，直接内存没有被回收（虚拟机不会自动回收直接内存）。 ByteBuf有release和retain两个接口，由AbstractReferenceCountedByteBuf实现，分别表示对Buffer引用数目的减少和增加，当release后引用数目为0时，会对Buffer进行回收。对于内存池内的Buffer以及直接内存Buffer需要我们显式调用release进行回收。忘记调用release方法就会发生内存泄漏，特别是对于内存池而言，内存池会不断变大占用大量内存。 对于内存泄漏的监控，Netty有四个级别：Disabled，Simple，Advanced，Paranoid；分别对应不同的监控频率和性能损耗。那么Netty是如何实现内存监控的呢？ 可以查看AbstractByteBufAllocator类的toLeakAwareBuffer方法，这里实际上利用了装饰器模式，以SimpleLeakAwareByteBuf为例，它持有实际起作用的ByteBuf实例，以及一个ResourceLeakTracker，ResourceLeakTracker的实现类DefaultResourceLeak继承了PhantomReference，ResourceLeakDetector将一个ReferenceQueue传入ResourceLeakTracker，这样在SimpleLeakAwareByteBuf引用被回收后，ReferenceQueue就被插入对应的refernce，我们就可以知道某个ByteBuf不再被使用了。 但是我们如何得知这个ByteBuf是否被释放了呢？ 这是由一个ConcurrentHashMap来决定的，它存储的key就是DefaultResourceLeak（value应该是内存泄露的相关信息），当调用release并确定可以回收时，会把map中对应的key清除掉，这样ResourceLeakDetector会定期检查ReferenceQueue，当其中存在reference时，会查看map中是否也存在，如果也存在，那么就可以确认发生内存泄露了。（ReferenceQueue和ConcurrentHashMap都在ResourceLeakDetector中） 关于内存泄露监控机制的不同级别，以Simple为例，我们查看AbstractByteBufAllocator的toLeakAwareBuffer方法，一路查到ResourceLeakDetector的track0方法，该方法内可以看到实际上是使用线程安全的随机数对设定的参数（默认应该是100）取余为0时，返回DefaultResourceLeak，并检查是否发生内存泄漏，否则返回null，当级别为Disable时，直接返回null，并不做检查，这样就没有性能损耗了。","categories":[{"name":"Java Web","slug":"Java-Web","permalink":"https://carrotwang.github.io/categories/Java-Web/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://carrotwang.github.io/tags/Java/"},{"name":"Netty","slug":"Netty","permalink":"https://carrotwang.github.io/tags/Netty/"}]},{"title":"Netty源码阅读（整体介绍）","slug":"Netty源码阅读（整体介绍）","date":"2019-11-06T03:24:59.000Z","updated":"2019-11-06T03:29:05.036Z","comments":true,"path":"2019/11/06/Netty源码阅读（整体介绍）/","link":"","permalink":"https://carrotwang.github.io/2019/11/06/Netty%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%EF%BC%89/","excerpt":"","text":"一. Netty做了什么？1.Netty实现了对Java NIO的封装，提供了更方便使用的接口； 2.Netty利用责任链模式实现了ChannelPipeline这一概念，基于ChannelPipeline，我们可以 优雅的实现网络消息的处理（可插拔，解耦）； 3.Netty的Reactor线程模型，利用无锁化提高了系统的性能； 4.Netty实现了ByteBuf用于对字节进行缓存和操作，相比JDK的ByteBuffer，它更易用，同时还提供了Buffer池的功能，对于UnpooledDirectByteBuf和PooledByteBuf，Netty还对其内存使用进行了跟踪，发现内存泄漏时会给出报警； 二.Netty对JDK NIO的封装JDK NIO有ServerSocketChannel、SocketChannel、Selector、SelectionKey几个核心概念。 Netty提供了一个Channel接口统一了对网络的IO操作，其底层的IO通信是交给Unsafe接口实现，而Channel主要负责更高层次的read、write、flush、和ChannelPipeline、Eventloop等组件的交互，以及一些状态的展示；做到了职责的清晰划分，对使用者是很友好的，规避了JDK NIO中一些比较繁琐复杂的概念和流程。 Channel、Unsafe继承UML图 Channel和Unsafe是分多级别实现的，不同级别的Channel和Unsafe对应了不同级别的实现，也是“职责单一原则”的体现。 三.ChannelPipeline责任链模型借用网上的一张图表示Channel、ChannelPipeline、ChannelHandlerContext和ChannelHandler之间的关系。 每个Channel都持有一个ChannelPipeline，通过Channel的读写等IO操作实际上是交由ChannelPipeline处理的，而ChannelPipeline会持有一个ChannelHandlerContext链表，每个Context内部又包含一个ChannelHandler，使用者在Pipeline上添加handler负责逻辑处理，ChannelHandlerContext负责事件的传递流转。每个ChannelPipeline都会持有2个特殊的ChannelHandlerContext——head和tail，他们分别是Context链表的头和尾。 ChannelPipeline上的事件，分为Inbound事件和Outbound事件2种，Inbound事件从headContext读入，在Context链上的InboundHandler上正向依次流动；Outbound事件从Channel（即ChannelPipeline）上触发，则从tailContext上出发，在Context链上的OutboundHandler上反向依次流动，若从某一个Context上触发，则从这个Context之后的下一个OutboundContext开始执行。headContext利用Unsafe完成实际的IO操作。 我们在使用Netty的时候，业务逻辑其实基本都存在于ChannelHandler；Netty也为我们提供了很多通用的Handler，如一些常用的编解码Handler，常见应用层协议的Handler，整流、心跳、日志等常用功能的Handler，合理使用这些Handler能迅速提高我们开发的效率。 四.Reactor线程模型Reactor模型是一种常见的并发编程模型，关于React模型可以参考这篇文章Reactor模型，React模型改变了Thread Per Connection的模式，它将一个网络IO操作分为2部分：连接的建立，网络通信及消息处理；这两部分分别用单独的线程池去处理（一般情况下，连接的建立用单独的一个线程就足够了），这样做的好处如下：功能解耦、利于维护、利于组件化复用、方便细粒度的并发控制，另外可以通过减少线程数，避免大量的线程切换。其模型图如下： 简单的说，一个Reactor线程（池）负责接收所有的连接请求，然后将连接产生的Channel赋给Work线程池中的线程，接下来的通信操作都交给Work线程执行。 Netty结合NIO的特点合理的使用了Reactor模型，具体地说，Netty的Reactor线程接收到一个连接请求后，会创建一个Channel，并为这个Channel分配一个EventLoop，每个EventLoop对应一个线程，Channel上的IO操作将在EventLoop上执行，一个Channel仅绑定在一个EventLoop上，一个EventLoop可以对应多个Channel，这样就避免了同步，也提高了线程的使用效率。 实际上，EventLoop中的线程除了执行IO操作，还会执行ChannelPipeline上的handler的责任链方法，这样做是为了避免频换切换线程带来的损耗，所以handler中一般不可以放置耗时的任务，如果有耗时的任务，可以将任务放入自定义的线程池中执行。 五.ByteBufJava的NIO给我们提供了缓冲区的实现ByteBuffer，但是它的易用性较差（读写模式需要切换等问题），所以，Netty自己重新实现了缓冲区ByteBuf，ByteBuf的API更易用、并且提供了内存池的功能，对于池化的ByteBuf和直接内存的ByteBuf，Netty还提供了对内存泄漏的监控（并且设置了各种性能级别），另外ByteBuf还提供了对ByteBuffer的兼容。","categories":[{"name":"Java Web","slug":"Java-Web","permalink":"https://carrotwang.github.io/categories/Java-Web/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://carrotwang.github.io/tags/Java/"},{"name":"Netty","slug":"Netty","permalink":"https://carrotwang.github.io/tags/Netty/"}]},{"title":"Java日志框架(Slf4j vs Commons Logging)","slug":"Java日志框架-Slf4j-vs-Commons-Logging","date":"2019-11-06T03:20:18.000Z","updated":"2019-11-06T03:22:54.037Z","comments":true,"path":"2019/11/06/Java日志框架-Slf4j-vs-Commons-Logging/","link":"","permalink":"https://carrotwang.github.io/2019/11/06/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6-Slf4j-vs-Commons-Logging/","excerpt":"","text":"最近，新开发的一个项目遇到了一个log4j的配置问题，之前一直没怎么关注过日志框架，借助这个机会，好好了解下Java的日志框架，便于以后更好的使用。 本文重点介绍了：Java日志框架生态、Java日志框架的结构组成、Slf4j替代Commons Logging。 Java常用的日志框架如下： Commons Logging：Apache基金会所属的项目，是一套Java日志接口； Slf4j：是一套简易Java日志门面，本身并无日志的实现。（Simple Logging Facade for Java，缩写Slf4j）； log4j：Apache Log4j是一个基于Java的日志记录工具； log4j 2：Apache Log4j 2是apache开发的一款Log4j的升级产品，不兼容log4j 1； Logback：一套日志组件的实现(slf4j阵营)； Jul：Java Util Logging，自Java1.4以来的官方日志实现。 现今，Java日志领域被划分为两大阵营：Commons Logging阵营和SLF4J阵营。 各日志框架之间的关系： Commons Logging和Slf4j是两个日志门面框架，系统不和日志实现耦合，日志门面作为接待员，方便日志实现的替换（如：log4j2替换log4j1）； Commons Logging和log4j1、2配合使用，Slf4j和Logback组合使用； 新项目建议使用Slf4j与Logback组合； ##桥接原理分析桥接器原本语境是使用在网络中数据包的转发，在日志框架里，主要是日志门面寻找日志实现类的类。 Slf4j在获取日志框架实现时扫描class path，寻找org.slf4j.impl.StaticLoggerBinder（有多个，会打印警告日志，并选择遇到的第一个），桥接器就是提供桥接来实现类和接口类之间的适配。 对于Commons Logging，其寻找Logger实现的步骤如下： 首先，寻找org.apache.commons.logging.LogFactory 属性配置 否则，利用JDK1.3 开始提供的service 发现机制，会扫描classpah 下的META-INF/services/org.apache.commons.logging.LogFactory 文件，若找到则装载里面的配置，使用里面的配置。 否则，从Classpath 里寻找commons-logging.properties ，找到则根据里面的配置加载。 否则，使用默认的配置：如果能找到Log4j 则默认使用log4j 实现，如果没有则使用JDK14Logger 实现，再没有则使用commons-logging 内部提供的SimpleLog 实现。 Slf4j和Commons Logging获取Logger的区别：Slf4j扫描classpath获取StaticLoggerBinder，通过StaticLoggerBinder的静态绑定逻辑获取Logger。Commons Logging是采用ClassLoader动态的获取Logger，在一些情况下会产生ClassLoader的问题（如OSGI，主要原因在文末Ceki Gülcü的一片参考文献有提及） Slf4j&amp;Logback的优势 Slf4j的静态绑定实现机制决定了其更加通用； Logback拥有更好的性能；Logback声称：某些关键操作，比如判定是否记录一条日志语句的操作，其性能得到了显著的提高。这个操作在Logback中需要3纳秒，而在Log4J中则需要30纳秒。LogBack创建记录器（logger）的速度也更快：13毫秒，而在Log4J中需要23毫秒。更重要的是，它获取已存在的记录器只需94纳秒，而Log4J需要2234纳秒，时间减少到了1/23。跟JUL相比的性能提高也是显著的。 自动重新加载配置文件，当配置文件修改了，Logback-classic能自动重新加载配置文件… ##LogBack结构Java日志框架由3部分组成，分别是Logger，Formatter，Appender。Logger：用来接收用户输入的内容；Formatter：用来格式化日志内容；Appender：将日志内容输出到Console，socket，文件，数据库，邮件等。在Logback中，则分别对应于Logger、Layout、Appender。 Logger Logger有三点需要重点关注：名字属性、Level属性，如何获取。 （1）每个Logger都有一个名字，并且有父子、子孙层次关系； 存在一个特殊的Logger实例，它的名字为“org.slf4j.Logger.ROOT_LOGGER_NAME”，即“ROOT” （2）Logger实例应该设置Level属性，如果某个Logger实例的Level属性未设置，那么沿着Logger实例的层次关系向上回溯直到最顶层的”ROOT”Logger实例为止。 （3）在Logback运行的时候，LoggerContext类实例会维护一个类型为Map&lt;String, Logger&gt;的map对象loggerCache，它的key为Logger实例的名字，它的value为对应的Logger实例。当我们执行”LoggerFactory.getLogger(‘xxx’)”语句，来检索名字为”xxx”的Logger实例时，LoggerContext类实例会先去查看loggerCache对象，看是否已经存在名字为”xxx”的Logger实例，如果存在，直接返回；否则，先创建好Logger实例（注意这里创建Logger实例的时候，会把loggerCache中不存在的祖先和父亲Logger实例都创建好）并放入loggerCache中，最后返回刚创建好的Logger实例。即在Logback运行的时候，相同名字的Logger实例只保存一份。 Layout 绑定在Appender上，用来格式化Appender的输出 Appender Appender代表日志输出目的地，可以是Console, File, Sockets, DataBase等等。一个Logger实例上可以绑定0到多个Appender实例，当在该Logger实例上产生的日志记录请求是有效的情况下，日志记录请求会被发送到所有绑定在该Logger实例上的Appender实例。一个Logger实例上绑定的Appender实例不仅来自自身的绑定，也来自祖先和父亲Logger实例的Appender绑定，即可以继承祖先和父亲Logger实例绑定的Appender实例。 Slf4j替代Commons LoggingJava生态有许多日志工具，不同的组件可能会使用不同的日志框架，为了不对日志框架产生依赖，Apache引入了Commons Logging门面框架，不过当程序规模越来越庞大时，JCL的动态绑定并不是总能成功。Slf4j的静态绑定功能解决了这一问题，然而，依赖的组件中可能会有使用了Commons Logging的组件，Slf4j提供了jcl-over-slf4j.jar ，可以借助jcl-over-slf4j.jar 讲Commons Logging输出的日志引入到Slf4j中。Component(服务) | | log to Apache Commons Logging(JCL) Vjcl-over-slf4j.jar — (redirect) —&gt; SLF4j —&gt; slf4j-log4j12-version.jar —&gt; log4j.jar —&gt; 输出日志（另外也可以删除所有Commons Logging的依赖，不过这太繁琐了，也容易出问题）。 参考文献：https://www.cnblogs.com/chenhongliang/p/5312517.html（各日志框架介绍）https://www.cnblogs.com/crazyrunning/p/6145890.html（日志门面的作用）http://www.runoob.com/design-pattern/facade-pattern.html（门面模式）https://blog.csdn.net/jpf254/article/details/80757041（Slf4j桥接原理）http://singleant.iteye.com/blog/934593（commons-logging Logger实现加载步骤）https://blog.csdn.net/dslztx/article/details/47450741（Logback详解）https://articles.qos.ch/classloader.html（Ceki Gülcü控诉了Commons Logging的弊端😂）https://blog.csdn.net/zbajie001/article/details/79596109（Logback的优点）https://blog.csdn.net/javaloveiphone/article/details/52486257（Slf4j替代Commons Logging）","categories":[{"name":"Java Web","slug":"Java-Web","permalink":"https://carrotwang.github.io/categories/Java-Web/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://carrotwang.github.io/tags/Java/"},{"name":"Web","slug":"Web","permalink":"https://carrotwang.github.io/tags/Web/"}]},{"title":"Maven Profile集成Spring Profile","slug":"Maven-Profile集成Spring-Profile","date":"2019-11-06T03:12:02.000Z","updated":"2019-11-06T03:15:34.076Z","comments":true,"path":"2019/11/06/Maven-Profile集成Spring-Profile/","link":"","permalink":"https://carrotwang.github.io/2019/11/06/Maven-Profile%E9%9B%86%E6%88%90Spring-Profile/","excerpt":"","text":"我们在一个产品的生命周期内，会接触多个环节：开发环境、测试环境、生产环境，这些环境会对应不同的DataSource、Redis集群、Zookeeper等配置。 Maven的Profile机制Profile能让你为一个特殊的环境自定义一个特殊的构建；profile使得不同环境间构建的可移植性成为可能。Maven中的profile是一组可选的配置，可以用来设置或者覆盖配置默认值。有了profile，你就可以为不同的环境定制构建。 123456789101112131415161718192021&lt;project&gt; &lt;profiles&gt; &lt;profile&gt; &lt;build&gt; &lt;defaultGoal&gt;...&lt;/defaultGoal&gt; &lt;finalName&gt;...&lt;/finalName&gt; &lt;resources&gt;...&lt;/resources&gt; &lt;testResources&gt;...&lt;/testResources&gt; &lt;plugins&gt;...&lt;/plugins&gt; &lt;/build&gt; &lt;reporting&gt;...&lt;/reporting&gt; &lt;modules&gt;...&lt;/modules&gt; &lt;dependencies&gt;...&lt;/dependencies&gt; &lt;dependencyManagement&gt;...&lt;/dependencyManagement&gt; &lt;distributionManagement&gt;...&lt;/distributionManagement&gt; &lt;repositories&gt;...&lt;/repositories&gt; &lt;pluginRepositories&gt;...&lt;/pluginRepositories&gt; &lt;properties&gt;...&lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt;&lt;/project&gt; 一个Profile可以覆盖项目构件的最终名称，项目依赖，插件配置以影响构建行为，Profile还可以覆盖分发配置。maven提供了一种针对不同环境参数“激活”一个profile的方式，这就叫做profile激活。 使用-P参数显示的激活一个profile 我们在进行Maven操作时就可以使用-P参数显示的指定当前激活的是哪一个profile了。比如我们需要在对项目进行打包的时候使用id为profileTest1的profile，我们就可以这样做： 1mvn package –P profileTest1 Spring Boot的支持SpringBoot使用一个全局的配置文件application.properties或application.yml，配置文件路径：src/main/resource目录下或类路径下的/config下。 Spring boot支持配置多个环境的配置文件，其配置文件名字格式application-{profile}.yml Spring可以在application.properties指定激活的profile，配置如下： 12#properties格式spring.profiles.active=dev 也可以在启动应用的时候添加启动参数--spring.profiles.active=dev。（⚠️Spring Boot的Profile机制和Maven的其实是没关系的，文末给出了一篇博客，讲解了如何将Maven的Profile机制与Spring Boot的active profile机制同步，未验证） 微服务环境下的配置文件前面介绍的两种方式，配置文件都显式的暴露在项目中，这对于实际运营的项目，是有比较多的问题的： 对于在线运营的项目有安全隐患，数据库等信息都会暴露出来，给产品的安全带来很大的隐患 对于微服务场景，不利于维护 （1）配置分散在不同的项目中，不利于统一管理 （2）配置和代码处于同一个版本体系下，不利于版本管理 （3）多个系统共同使用的配置更改时，需要一处处去修改，非常麻烦，容易出错 （4）对于动态配置的文件，也不利于OPS维护因此，业界普遍采用了Config Server的方式，Spring Cloud提供了Spring Cloud Config的组件，帮助我们管理微服务的配置。 Consu可以l作为配置服务，并采用git存储。另外Spring Cloud Config也支持git版本管理，Consul在可用性的支持上更胜一筹；对于动态配置，Consul也会方便一些不需要借助Spring Cloud Bus这样的中间件。（Spring Cloud Bus将Spring的事件处理机制和消息中间件消息的发送和接收整合起来，可以轻松的将分布式应用中连接有消息中间件的多个服务节点连接起来，实现消息互通。） 参考文献：https://www.cnblogs.com/wxgblogs/p/6696229.html（Maven Profiles详解）https://www.jianshu.com/p/8c48f4fd69da（Profile之Maven、Spring Boot、Spring Cloud Config）https://www.cnblogs.com/softidea/p/6375806.html（从Maven的Profile环境获取Spring Boot的active profile）https://yq.aliyun.com/articles/468274（阿里巴巴微服务配置中心介绍）https://www.jianshu.com/p/b1463c1df5a2（Consul作为微服务配置中心）","categories":[{"name":"Java Web","slug":"Java-Web","permalink":"https://carrotwang.github.io/categories/Java-Web/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://carrotwang.github.io/tags/Java/"},{"name":"Web","slug":"Web","permalink":"https://carrotwang.github.io/tags/Web/"},{"name":"Spring","slug":"Spring","permalink":"https://carrotwang.github.io/tags/Spring/"},{"name":"Maven","slug":"Maven","permalink":"https://carrotwang.github.io/tags/Maven/"}]},{"title":"5分钟flink极简入门","slug":"5分钟flink极简入门","date":"2019-11-06T01:59:03.000Z","updated":"2019-11-06T02:06:20.039Z","comments":true,"path":"2019/11/06/5分钟flink极简入门/","link":"","permalink":"https://carrotwang.github.io/2019/11/06/5%E5%88%86%E9%92%9Fflink%E6%9E%81%E7%AE%80%E5%85%A5%E9%97%A8/","excerpt":"","text":"","categories":[{"name":"flink","slug":"flink","permalink":"https://carrotwang.github.io/categories/flink/"}],"tags":[{"name":"flink","slug":"flink","permalink":"https://carrotwang.github.io/tags/flink/"},{"name":"大数据","slug":"大数据","permalink":"https://carrotwang.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"实时计算","slug":"实时计算","permalink":"https://carrotwang.github.io/tags/%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97/"}]},{"title":"Netty源码阅读（序）","slug":"Netty源码阅读（序）","date":"2019-11-06T01:33:07.000Z","updated":"2019-11-06T03:33:54.427Z","comments":true,"path":"2019/11/06/Netty源码阅读（序）/","link":"","permalink":"https://carrotwang.github.io/2019/11/06/Netty%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%EF%BC%88%E5%BA%8F%EF%BC%89/","excerpt":"","text":"参加的阿里中间件性能挑战赛用到了Netty，就决定利用这个机会，读一读Netty的源码。首先，我认为阅读源码大致有2个主要目的，1.了解Netty的内部机制，更好的使用Netty；2.学习Netty的实现，比如池化的ByteBuf、以及EventLoop的责任链模式，我认为都有很多值得借鉴，可以用在工作中的技巧和思想；3.可以看一看比较复杂的框架代码的组织结构、代码风格，并做一些思考🤔。 阅读源码之前，首先要有一个大局观，就是Netty解决了什么问题，有什么优点，主要有哪些模块组成？ 另外，我认为带着问题去阅读，才能够带来更多的收获。所以，我想在这次阅读源码的过程中，能够回答以下这些问题： Netty有哪些主要组成部分？ Channel、ChannelPipeline、ChannelHandler、Eventloop、ChannelFuture、Bootstrap等。 Netty如何对Java NIO进行的封装？ Netty的Channel借助门面模式，(1)封装了和网络相关的操作，提供了统一的视图（对于ServerSocketChannel和SocketChannel），其底层IO操作是由UnSafe接口实现的，而Channel的骨骼类AbstractChannel只是调用了ChannelPipeline的相应方法让事件在责任链上传递依次处理，ChannelPipeline上的HeadContext调用UnSafe的方法执行实际的IO操作；（2）封装了对Channel接口的配置参数操作（3）维护了Channel的状态（readable，writable，open，active等）（4）Channel接口还聚合了ChannelPipeline接口，而ChannelPipeline用于处理所有的IO事件。 Netty如何利用无锁化做到的高性能？ netty如何监控内存泄漏？ netty如何实现的buffer池？ netty在代码设计方面值得学习的地方？ 最后，给出一些我初次阅读较大项目源码的一些思考： 先了解整体框架，再去找感兴趣的部分去读； 2.带着问题去读； 3.阅读Netty源码是一个学习并发编程，网络编程极好的方式。 Netty中的设计模式： 观察者模式：Future，Listener 责任链模式：ChannelPipeline 门面模式：Channel统一封装了网络操作。 适配器模式：ChannelInboundHandlerAdapter 装饰器模式：SimpleLeakAwareByteBufio.netty.util.concurrent.SingleThreadEventExecutor#wakeup 什么作用？ Netty中的死锁问题？","categories":[{"name":"Java Web","slug":"Java-Web","permalink":"https://carrotwang.github.io/categories/Java-Web/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://carrotwang.github.io/tags/Java/"},{"name":"Netty","slug":"Netty","permalink":"https://carrotwang.github.io/tags/Netty/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-11-05T08:42:15.455Z","updated":"2019-11-06T01:53:42.564Z","comments":true,"path":"2019/11/05/hello-world/","link":"","permalink":"https://carrotwang.github.io/2019/11/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"前端","slug":"前端","permalink":"https://carrotwang.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://carrotwang.github.io/tags/hexo/"}]}]}